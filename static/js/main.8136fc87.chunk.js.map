{"version":3,"sources":["components/common/Loading.tsx","components/common/Spinner.tsx","components/todo/template/TodoTemplate.tsx","constants/constants.ts","components/todo/template/head/TodoHead.tsx","components/todo/template/list/item/TodoItem.tsx","components/todo/template/list/TodoList.tsx","components/todo/template/create/TodoCreate.tsx","components/todo/template/footer/TodoFooter.tsx","components/todo/TodoContainer.tsx","components/todo/TodoService.tsx","App.tsx","index.js"],"names":["Loading","props","LoadingOutlined","style","fontSize","size","spin","StyledSpinnerWrapper","styled","Row","styleProps","Spinner","tip","delay","mask","className","justify","align","indicator","defaultProps","TodoTemplate","children","TodoTemplateBlock","div","React","memo","MONTHS","DAYS","TodoHead","useState","Date","date","setDate","useEffect","timer","setInterval","now","clearInterval","timeFormat","n","TodoHeadBlock","DateText","getDay","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","TodoItem","toggleTodo","removeTodo","todo","done","setDone","TodoItemBlock","CheckCircle","onClick","prev","id","CheckOutlined","TodoText","text","deadline","Remove","DeleteOutlined","css","Text","TodoList","todos","TodoListBlock","length","map","image","Empty","PRESENTED_IMAGE_SIMPLE","marginTop","TodoCreate","nextId","createTodo","setText","InsertFormPositioner","InsertForm","onSubmit","e","preventDefault","format","Modal","warning","title","Input","autoFocus","placeholder","value","onChange","target","inputReadOnly","disabledDate","current","moment","add","CircleButton","type","PlusCircleOutlined","form","input","button","Todofooter","undoneTasks","filter","TodoFooterBlock","LeftText","TodoContainer","setTodos","useRef","loadData","saveData","data","localStorage","getItem","savedTodos","JSON","parse","Math","max","apply","setItem","stringify","concat","useTodo","TodoFooter","App","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8136fc87.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { SpinSize } from 'antd/lib/spin';\n\ninterface ILoadingProps {\n  size?: SpinSize;\n  style?: React.CSSProperties;\n}\n\nexport default function Loading(props: ILoadingProps): ReactElement {\n  return (\n    <LoadingOutlined\n      style={{\n        fontSize: props.size === 'large' ? 48 : 24,\n        ...props.style,\n      }}\n      spin\n    />\n  );\n}\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { Spin, Row, Col } from 'antd';\nimport { SpinSize } from 'antd/lib/spin';\n\nimport Loading from './Loading';\n\ninterface ISpinnerProps {\n  tip?: string;\n  size?: SpinSize;\n  delay?: number;\n  style?: React.CSSProperties;\n  mask?: boolean;\n}\n\ninterface IWrapperProp {\n  readonly ['data-mask']: boolean;\n}\n\nconst StyledSpinnerWrapper = styled(Row)<IWrapperProp>`\n  background-color: ${styleProps =>\n    styleProps['data-mask'] ? 'rgba(0, 0, 0, 0.1)' : 'transparent'};\n`;\n\nfunction Spinner(props: ISpinnerProps): ReactElement {\n  const { tip, size, delay, style, mask = false } = props;\n\n  return (\n    <StyledSpinnerWrapper\n      className=\"spinner-wrap\"\n      justify=\"center\"\n      align=\"middle\"\n      style={style}\n      data-mask={mask}\n    >\n      <Col>\n        <Spin\n          indicator={<Loading size={size} />}\n          delay={delay}\n          tip={tip}\n          size={size}\n        />\n      </Col>\n    </StyledSpinnerWrapper>\n  );\n}\n\nSpinner.defaultProps = {\n  tip: '로딩중입니다.',\n  size: 'large',\n  delay: 0,\n  style: {},\n  mask: false,\n};\n\nexport default Spinner;\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\n\ntype Props = {\n  children: JSX.Element[];\n};\n\nfunction TodoTemplate({ children }: Props): ReactElement {\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\n}\n\nconst TodoTemplateBlock = styled.div`\n  width: 70%;\n  height: 800px;\n\n  min-width: 360px;\n  max-width: 700px;\n\n  position: relative;\n  background: white;\n  border-radius: 30px;\n  box-shadow: 0 0 50px 0 rgba(0, 0, 0, 0.1);\n\n  margin: 0 auto;\n\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default React.memo(TodoTemplate);\n","export const MONTHS: string[] = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport const DAYS: string[] = [\n  'Mon.',\n  'The.',\n  'Wed.',\n  'Thu.',\n  'Fri.',\n  'Sat.',\n  'Sun.',\n];\n","import React, { ReactElement, useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { MONTHS, DAYS } from 'constants/constants';\n\nconst TodoHead = (): ReactElement => {\n  const [date, setDate] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const timer: NodeJS.Timer = setInterval(() => {\n      const now: Date = new Date();\n      setDate(now);\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  const timeFormat = (n: number): string => (n < 10 ? `0${n}` : `${n}`);\n\n  return (\n    <TodoHeadBlock>\n      <Row>\n        <DateText>{DAYS[date.getDay() - 1]}</DateText>\n        <DateText>{MONTHS[date.getMonth()]}</DateText>\n        <DateText>{date.getDate()},</DateText>\n        <DateText>{date.getFullYear()}</DateText>\n      </Row>\n      <Row>\n        <DateText>\n          {timeFormat(date.getHours() % 12 || 12)}:\n          {timeFormat(date.getMinutes())}:{timeFormat(date.getSeconds())}\n          {date.getHours() >= 12 ? ' p.m.' : ' a.m.'}\n        </DateText>\n      </Row>\n    </TodoHeadBlock>\n  );\n};\n\nconst TodoHeadBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 24px;\n  padding-bottom: 24px;\n  border-bottom: 3px solid #33bb77;\n`;\n\nconst Row = styled.div`\n  display: flex;\n`;\n\nconst DateText = styled.div`\n  font-size: 26px;\n  color: #119955;\n  padding-left: 10px;\n`;\n\nexport default React.memo(TodoHead);\n","import React, { ReactElement, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { CheckOutlined, DeleteOutlined } from '@ant-design/icons';\n\nimport { Itodo } from 'components/todo/TodoService';\n\ninterface TodoItemProps {\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n  todo: Itodo;\n}\n\nconst TodoItem = ({\n  toggleTodo,\n  removeTodo,\n  todo,\n}: TodoItemProps): ReactElement => {\n  const [done, setDone] = useState<boolean>(todo.done);\n\n  const handleToggle = () => {\n    setDone(prev => !prev);\n    toggleTodo(todo.id);\n  };\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={done} onClick={handleToggle}>\n        {done && <CheckOutlined />}\n      </CheckCircle>\n      <TodoText done={done}>{todo.text}</TodoText>\n      <DateText done={done}>\n        {todo.deadline ? `${todo.deadline} 까지` : '기한 없음'}\n      </DateText>\n      <Remove onClick={() => removeTodo(todo.id)}>\n        <DeleteOutlined />\n      </Remove>\n    </TodoItemBlock>\n  );\n};\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n`;\n\nconst CheckCircle = styled.div<{ done: boolean }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 16px;\n  border: 1px solid #33bb77;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n\n  ${props =>\n    props.done &&\n    css`\n      border: 1px solid #dddddd;\n      color: #dddddd;\n    `}\n`;\n\nconst Text = styled.div<{ done: boolean }>`\n  color: #119955;\n\n  ${props =>\n    props.done &&\n    css`\n      color: #ced4da;\n      text-decoration: line-through;\n    `}\n`;\n\nconst TodoText = styled(Text)`\n  flex: 1;\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst DateText = styled(Text)`\n  font-size: 14px;\n  margin: 0 15px;\n`;\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #119955;\n  font-size: 16px;\n  cursor: pointer;\n`;\n\nexport default React.memo(TodoItem);\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { Empty } from 'antd';\n\nimport { Itodo } from 'components/todo/TodoService';\nimport Loading from 'components/common/Loading';\nimport TodoItem from './item/TodoItem';\n\ninterface TodoListProps {\n  todos: Itodo[] | null;\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n}\n\nconst TodoList = ({\n  toggleTodo,\n  removeTodo,\n  todos,\n}: TodoListProps): ReactElement => {\n  if (!todos) return <Loading style={{ marginTop: '50px' }} />;\n\n  return (\n    <TodoListBlock>\n      {todos.length ? (\n        todos.map(todo => (\n          <TodoItem\n            toggleTodo={toggleTodo}\n            removeTodo={removeTodo}\n            key={todo.id}\n            todo={todo}\n          />\n        ))\n      ) : (\n        <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n    </TodoListBlock>\n  );\n};\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\nexport default React.memo(TodoList);\n","import React, { ReactElement, useState } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { PlusCircleOutlined } from '@ant-design/icons';\nimport { DatePicker, Modal } from 'antd';\n\nimport { Itodo } from 'components/todo/TodoService';\n\ninterface TodoCreateProps {\n  nextId: number;\n  createTodo: (todo: Itodo) => void;\n}\n\nconst TodoCreate = ({ nextId, createTodo }: TodoCreateProps): ReactElement => {\n  const [text, setText] = useState<string>('');\n  const [date, setDate] = useState<moment.Moment | null>(null);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n\n    if (!text) {\n      Modal.warning({\n        title: '할 일을 작성해주세요.',\n      });\n\n      return;\n    }\n\n    createTodo({\n      id: nextId,\n      text,\n      done: false,\n      deadline: date?.format('YYYY-MM-DD') || '',\n    });\n    setText('');\n    setDate(null);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setText(e.target.value);\n  };\n\n  const disabledDate = (current: moment.Moment): boolean => {\n    return current < moment().add(-1, 'days');\n  };\n\n  return (\n    <InsertFormPositioner>\n      <InsertForm onSubmit={handleSubmit}>\n        <Input\n          autoFocus\n          placeholder=\"What's need to be done?\"\n          value={text}\n          onChange={handleInputChange}\n        />\n        <DatePicker\n          format=\"YYYY-MM-DD\"\n          inputReadOnly\n          value={date}\n          disabledDate={disabledDate}\n          onChange={setDate}\n        />\n        <CircleButton type=\"submit\">\n          <PlusCircleOutlined />\n        </CircleButton>\n      </InsertForm>\n    </InsertFormPositioner>\n  );\n};\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  border-bottom: 1px solid #eeeeee;\n`;\n\nconst InsertForm = styled.form`\n  display: flex;\n  background: #eeeeee;\n  padding-left: 40px;\n  padding-top: 36px;\n  padding-right: 60px;\n  padding-bottom: 36px;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  padding: 12px;\n  border: 1px solid #dddddd;\n  outline: none;\n  font-size: 21px;\n  box-sizing: border-box;\n  color: #119955;\n  margin-right: 15px;\n\n  &::placeholder {\n    color: #dddddd;\n    font-size: 16px;\n  }\n`;\n\nconst CircleButton = styled.button`\n  background: #33bb77;\n  width: 50px;\n  height: 50px;\n  font-size: 50px;\n  left: 50%;\n  transform: translate(50%, 0%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-self: center;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n`;\n\nexport default React.memo(TodoCreate);\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\n\nimport { Itodo } from 'components/todo/TodoService';\n\ninterface HooksTodoHeadProps {\n  todos: Itodo[] | null;\n}\n\nconst Todofooter = ({ todos }: HooksTodoHeadProps): ReactElement | null => {\n  if (!todos) return null;\n\n  const undoneTasks = todos.filter(todo => !todo.done);\n\n  return (\n    <TodoFooterBlock>\n      <LeftText className=\"tasks-left\">\n        {undoneTasks.length} items left\n      </LeftText>\n    </TodoFooterBlock>\n  );\n};\n\nconst TodoFooterBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 24px;\n  padding-bottom: 24px;\n`;\n\nconst LeftText = styled.div`\n  color: #33bb77;\n  font-size: 18px;\n`;\n\nexport default React.memo(Todofooter);\n","import React, { ReactElement } from 'react';\nimport { useTodo } from './TodoService';\nimport TodoTemplate from './template/TodoTemplate';\nimport TodoHead from './template/head/TodoHead';\nimport TodoList from './template/list/TodoList';\nimport TodoCreate from './template/create/TodoCreate';\nimport TodoFooter from './template/footer/TodoFooter';\n\nconst TodoContainer = (): ReactElement => {\n  const { todos, nextId, toggleTodo, removeTodo, createTodo } = useTodo();\n\n  return (\n    <TodoTemplate>\n      <TodoHead />\n      <TodoCreate nextId={nextId} createTodo={createTodo} />\n      <TodoList toggleTodo={toggleTodo} removeTodo={removeTodo} todos={todos} />\n      <TodoFooter todos={todos} />\n    </TodoTemplate>\n  );\n};\n\nexport default TodoContainer;\n","import { useState, useEffect, useRef } from 'react';\n\nexport type Itodo = {\n  id: number;\n  text: string;\n  done: boolean;\n  deadline: string;\n};\n\ninterface IUseTodo {\n  todos: Itodo[] | null;\n  nextId: number;\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n  createTodo: (todo: Itodo) => void;\n}\n\nexport const useTodo = (): IUseTodo => {\n  const [todos, setTodos] = useState<Itodo[] | null>(null);\n  const nextId = useRef<number>(0);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    saveData(todos as Itodo[]);\n  }, [todos]);\n\n  const loadData = (): void => {\n    const data: string = localStorage.getItem('todos') || '[]';\n    const savedTodos: Itodo[] = JSON.parse(data);\n\n    nextId.current =\n      savedTodos.length === 0\n        ? 0\n        : Math.max.apply(\n            null,\n            savedTodos.map(todo => todo.id),\n          );\n\n    setTodos(savedTodos);\n  };\n\n  const saveData = (todos: Itodo[]): void => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n\n  const toggleTodo = (id: number): void => {\n    setTodos(prev =>\n      (prev as Itodo[]).map((todo: Itodo) => {\n        if (todo.id === id) {\n          todo.done = !todo.done;\n        }\n\n        return todo;\n      }),\n    );\n  };\n\n  const removeTodo = (id: number): void => {\n    setTodos(prev => (prev as Itodo[]).filter((todo: Itodo) => todo.id !== id));\n  };\n\n  const createTodo = (todo: Itodo): void => {\n    setTodos(prev =>\n      (prev as Itodo[]).concat({\n        ...todo,\n        id: ++nextId.current,\n      }),\n    );\n  };\n\n  return {\n    todos,\n    nextId: nextId.current,\n    toggleTodo,\n    removeTodo,\n    createTodo,\n  };\n};\n","import React, { ReactElement } from 'react';\nimport 'antd/dist/antd.css';\nimport Spinner from './components/common/Spinner';\nimport TodoContainer from './components/todo/TodoContainer';\n\nconst App = (): ReactElement => {\n  //@TODO login\n  let isLogged = true;\n\n  const RenderLayout = (\n    <div>\n      <TodoContainer />\n    </div>\n  );\n\n  return isLogged ? RenderLayout : <Spinner mask />;\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport App from './App';\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n  }\n\n  body {\n    background: #eeeeee;\n  }\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}